#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function ask(question) {
  return new Promise((resolve) => {
    rl.question(question, resolve);
  });
}

// Ëß£ÊûêFront Matter
function parseFrontMatter(content) {
  const frontMatterRegex = /^---\s*\n([\s\S]*?)\n---\s*\n([\s\S]*)$/;
  const match = content.match(frontMatterRegex);
  
  if (match) {
    const frontMatter = match[1];
    const body = match[2];
    
    const metadata = {};
    frontMatter.split('\n').forEach(line => {
      const [key, ...valueParts] = line.split(':');
      if (key && valueParts.length > 0) {
        let value = valueParts.join(':').trim();
        
        if (value.startsWith('[') && value.endsWith(']')) {
          value = value.slice(1, -1).split(',').map(item => item.trim().replace(/['"]/g, ''));
        } else if (value.startsWith('"') && value.endsWith('"')) {
          value = value.slice(1, -1);
        } else if (value === 'true' || value === 'false') {
          value = value === 'true';
        }
        
        metadata[key.trim()] = value;
      }
    });
    
    return { metadata, body };
  }
  
  return { metadata: {}, body: content };
}

// ËΩ¨Êç¢Markdown‰∏∫MDX
function convertMarkdownToMDX(markdownContent) {
  let mdxContent = markdownContent;
  
  // ËΩ¨Êç¢‰∫§‰∫íÂºè‰ª£Á†ÅÂùó
  mdxContent = mdxContent.replace(
    /```(\w+)\s*<!--\s*interactive\s*-->([\s\S]*?)```/g,
    (match, language, code) => {
      return `<InteractiveCodeBlock
  code={\`${code.trim()}\`}
/>`;
    }
  );
  
  if (mdxContent.includes('<InteractiveCodeBlock')) {
    mdxContent = `import { InteractiveCodeBlock } from '@/components/InteractiveCodeBlock';\n\n${mdxContent}`;
  }
  
  return mdxContent;
}

// ÈÄíÂΩíËé∑ÂèñÊâÄÊúâMarkdownÊñá‰ª∂
function getAllMarkdownFiles(dir) {
  const files = [];
  
  function traverse(currentDir) {
    const items = fs.readdirSync(currentDir);
    
    for (const item of items) {
      const fullPath = path.join(currentDir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        traverse(fullPath);
      } else if (item.endsWith('.md') || item.endsWith('.markdown')) {
        files.push(fullPath);
      }
    }
  }
  
  traverse(dir);
  return files;
}

async function batchConvert() {
  console.log('üìÅ ÊâπÈáè Markdown ËΩ¨ MDX Â∑•ÂÖ∑\n');
  
  const inputPath = await ask('ËæìÂÖ• Markdown Êñá‰ª∂ÊàñÊñá‰ª∂Â§πË∑ØÂæÑ: ');
  
  if (!fs.existsSync(inputPath)) {
    console.error('‚ùå Ë∑ØÂæÑ‰∏çÂ≠òÂú®!');
    rl.close();
    return;
  }
  
  let markdownFiles = [];
  const stat = fs.statSync(inputPath);
  
  if (stat.isDirectory()) {
    markdownFiles = getAllMarkdownFiles(inputPath);
    console.log(`üìã ÊâæÂà∞ ${markdownFiles.length} ‰∏™ Markdown Êñá‰ª∂`);
  } else if (inputPath.endsWith('.md') || inputPath.endsWith('.markdown')) {
    markdownFiles = [inputPath];
  } else {
    console.error('‚ùå ËØ∑Êèê‰æõ Markdown Êñá‰ª∂ÊàñÂåÖÂê´ Markdown Êñá‰ª∂ÁöÑÊñá‰ª∂Â§π!');
    rl.close();
    return;
  }
  
  if (markdownFiles.length === 0) {
    console.log('‚ö†Ô∏è Ê≤°ÊúâÊâæÂà∞ Markdown Êñá‰ª∂');
    rl.close();
    return;
  }
  
  console.log('\nüìã Â∞ÜË¶ÅËΩ¨Êç¢ÁöÑÊñá‰ª∂:');
  markdownFiles.forEach((file, index) => {
    console.log(`${index + 1}. ${file}`);
  });
  
  const shouldContinue = await ask('\nÊòØÂê¶ÁªßÁª≠ËΩ¨Êç¢? (y/n): ');
  if (shouldContinue.toLowerCase() !== 'y') {
    rl.close();
    return;
  }
  
  const defaultCategory = await ask('ÈªòËÆ§ÂàÜÁ±ª (tutorial/ai/web-dev/data/tools/thoughts): ') || 'tutorial';
  const defaultAuthor = await ask('ÈªòËÆ§‰ΩúËÄÖ: ') || 'Rain';
  
  const results = {
    success: [],
    failed: [],
    skipped: []
  };
  
  for (const filePath of markdownFiles) {
    try {
      console.log(`\nüîÑ Â§ÑÁêÜ: ${path.basename(filePath)}`);
      
      const markdownContent = fs.readFileSync(filePath, 'utf8');
      const { metadata, body } = parseFrontMatter(markdownContent);
      
      // ÁîüÊàêslugÔºà‰ªéÊñá‰ª∂ÂêçÔºâ
      const slug = path.basename(filePath, path.extname(filePath))
        .toLowerCase()
        .replace(/[^a-z0-9\-]/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '');
      
      // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®
      const configPath = path.join(__dirname, '../src/content/blog/config.ts');
      const configContent = fs.readFileSync(configPath, 'utf8');
      
      if (configContent.includes(`'${slug}':`)) {
        console.log(`‚ö†Ô∏è ÊñáÁ´† '${slug}' Â∑≤Â≠òÂú®ÔºåË∑≥Ëøá`);
        results.skipped.push(filePath);
        continue;
      }
      
      const title = metadata.title || path.basename(filePath, path.extname(filePath));
      const excerpt = metadata.description || metadata.excerpt || `‰ªé ${path.basename(filePath)} ËΩ¨Êç¢ÁöÑÊñáÁ´†`;
      const tags = Array.isArray(metadata.tags) ? metadata.tags : ['Markdown'];
      const category = metadata.category || defaultCategory;
      const readTime = metadata.readTime || '10ÂàÜÈíü';
      const date = metadata.date || new Date().toISOString().split('T')[0];
      const author = metadata.author || defaultAuthor;
      
      // ËΩ¨Êç¢ÂÜÖÂÆπ
      const mdxContent = convertMarkdownToMDX(body);
      
      // ÂàõÂª∫MDXÊñá‰ª∂
      const outputPath = path.join(__dirname, '../src/content/blog/posts', `${slug}.mdx`);
      fs.writeFileSync(outputPath, mdxContent);
      
      // Êõ¥Êñ∞ÈÖçÁΩÆÊñá‰ª∂
      let newConfigContent = fs.readFileSync(configPath, 'utf8');
      
      const newPostConfig = `  '${slug}': {
    title: '${title}',
    excerpt: '${excerpt}',
    tags: [${tags.map(tag => `'${tag}'`).join(', ')}],
    date: '${date}',
    readTime: '${readTime}',
    category: '${category}',
    published: true,
    author: '${author}',
  },`;
      
      const insertPoint = newConfigContent.indexOf('};', newConfigContent.indexOf('export const blogPosts:'));
      newConfigContent = newConfigContent.slice(0, insertPoint) + newPostConfig + '\n' + newConfigContent.slice(insertPoint);
      fs.writeFileSync(configPath, newConfigContent);
      
      // Êõ¥Êñ∞MDXÂ∑•ÂÖ∑Êñá‰ª∂
      const mdxUtilPath = path.join(__dirname, '../src/utils/mdx.ts');
      let mdxUtilContent = fs.readFileSync(mdxUtilPath, 'utf8');
      
      const importLine = `  '${slug}': () => import('@/content/blog/posts/${slug}.mdx'),`;
      const importInsertPoint = mdxUtilContent.indexOf('} as const;');
      mdxUtilContent = mdxUtilContent.slice(0, importInsertPoint) + importLine + '\n' + mdxUtilContent.slice(importInsertPoint);
      fs.writeFileSync(mdxUtilPath, mdxUtilContent);
      
      console.log(`‚úÖ ÊàêÂäüËΩ¨Êç¢: ${slug}`);
      results.success.push({ filePath, slug });
      
    } catch (error) {
      console.error(`‚ùå ËΩ¨Êç¢Â§±Ë¥• ${filePath}:`, error.message);
      results.failed.push({ filePath, error: error.message });
    }
  }
  
  // ÊòæÁ§∫ÁªìÊûúÁªüËÆ°
  console.log('\nüìä ËΩ¨Êç¢ÁªìÊûúÁªüËÆ°:');
  console.log(`‚úÖ ÊàêÂäü: ${results.success.length}`);
  console.log(`‚ùå Â§±Ë¥•: ${results.failed.length}`);
  console.log(`‚ö†Ô∏è Ë∑≥Ëøá: ${results.skipped.length}`);
  
  if (results.success.length > 0) {
    console.log('\nüéâ ÊàêÂäüËΩ¨Êç¢ÁöÑÊñáÁ´†:');
    results.success.forEach(({ slug }) => {
      console.log(`- http://localhost:3001/posts/${slug}`);
    });
  }
  
  if (results.failed.length > 0) {
    console.log('\n‚ùå ËΩ¨Êç¢Â§±Ë¥•ÁöÑÊñá‰ª∂:');
    results.failed.forEach(({ filePath, error }) => {
      console.log(`- ${filePath}: ${error}`);
    });
  }
  
  // ËØ¢ÈóÆÊòØÂê¶Âà†Èô§ÂéüÂßãÊñá‰ª∂
  if (results.success.length > 0) {
    const shouldDelete = await ask('\nüóëÔ∏è ÊòØÂê¶Âà†Èô§ÊàêÂäüËΩ¨Êç¢ÁöÑÂéüÂßã Markdown Êñá‰ª∂? (y/n): ');
    if (shouldDelete.toLowerCase() === 'y') {
      results.success.forEach(({ filePath }) => {
        fs.unlinkSync(filePath);
        console.log(`üóëÔ∏è Âà†Èô§: ${filePath}`);
      });
    }
  }
  
  rl.close();
}

batchConvert().catch(console.error); 